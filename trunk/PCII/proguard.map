com.gampire.pc.Main -> com.gampire.pc.Main:
    int MAX_POINTS -> a
    void main(java.lang.String[]) -> main
com.gampire.pc.action.DefendAction -> k:
    void perform(com.gampire.pc.model.Unit) -> a
com.gampire.pc.action.FireAction -> at:
    void perform(com.gampire.pc.model.Unit) -> a
com.gampire.pc.action.MoveAction -> aq:
    void perform(com.gampire.pc.model.Unit) -> a
com.gampire.pc.action.MoveAndFireAction -> N:
    void perform(com.gampire.pc.model.Unit) -> a
com.gampire.pc.action.PlayGameAction -> ak:
    com.gampire.pc.control.BattleFieldController battleFieldController -> a
    com.gampire.pc.view.panel.BattleFieldControlPanel battleFieldControlPanel -> a
    void perform(com.gampire.pc.model.Unit) -> a
    void run() -> run
com.gampire.pc.action.StartGameAction -> q:
    com.gampire.pc.control.BattleFieldController battleFieldController -> a
    com.gampire.pc.view.panel.BattleFieldControlPanel battleFieldControlPanel -> a
    void run() -> run
com.gampire.pc.action.StopGameAction -> F:
    com.gampire.pc.control.BattleFieldController battleFieldController -> a
    com.gampire.pc.view.panel.BattleFieldControlPanel battleFieldControlPanel -> a
    void run() -> run
com.gampire.pc.control.BattleFieldController -> z:
    boolean gameRunning -> a
    com.gampire.pc.web.BareBonesBrowserLaunch battleField$21296f -> a
    com.gampire.pc.web.BareBonesBrowserLaunch cloneOfBattleFieldAtPreviousGameStart$21296f -> b
    com.gampire.pc.view.frame.BattleFieldFrame battleFieldFrame -> a
    com.gampire.pc.view.panel.BattleFieldPanel battleFieldPanel -> a
    javax.swing.Timer animationTimer -> a
    void startGame() -> a
    void stopGame() -> b
    void nextTurn() -> c
    void move(com.gampire.pc.model.Unit,boolean) -> a
    void fire(com.gampire.pc.model.Unit,com.gampire.pc.model.Unit,boolean) -> a
    void defend(com.gampire.pc.model.Unit) -> a
    com.gampire.pc.model.Unit getUnitSelectedForAction() -> a
    com.gampire.pc.model.Unit getUnitSelectedAsTarget() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.control.BattleFieldController$1 -> r:
    com.gampire.pc.control.BattleFieldController this$0 -> a
    void run() -> run
com.gampire.pc.control.BattleFieldController$2 -> m:
    com.gampire.pc.control.BattleFieldController this$0 -> a
    void run() -> run
com.gampire.pc.control.BattleFieldController$3 -> n:
    com.gampire.pc.control.BattleFieldController this$0 -> a
    void run() -> run
com.gampire.pc.control.BattleFieldController$CombatScroller -> am:
    com.gampire.pc.model.Unit unitSelectedForAction -> a
    com.gampire.pc.model.Unit unitSelectedAsTarget -> b
    com.gampire.pc.control.BattleFieldController this$0 -> a
    void run() -> run
com.gampire.pc.control.BattleFieldController$DestroyedUnitsRemover -> ao:
    com.gampire.pc.util.thread.ThreadUtil campLosingUnits$2a59c05e -> a
    com.gampire.pc.control.BattleFieldController this$0 -> a
    void run() -> run
com.gampire.pc.control.BattleFieldController$TargetSelectionnerAndScroller -> C:
    com.gampire.pc.control.BattleFieldController this$0 -> a
    void run() -> run
com.gampire.pc.control.UnitTableMouseListener -> M:
    com.gampire.pc.util.thread.ThreadUtil camp$2a59c05e -> a
    com.gampire.pc.view.panel.BattleFieldControlPanel battlefieldControlPanel -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
com.gampire.pc.json.JSONArray -> aw:
    java.util.ArrayList myArrayList -> a
    com.gampire.pc.json.JSONObject getJSONObject(int) -> a
    java.lang.String join(java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String toString(int,int) -> a
com.gampire.pc.json.JSONBeanFactory -> ar:
    java.lang.Object createBean(java.lang.Class,com.gampire.pc.json.JSONObject) -> a
    java.lang.Object[] createBeans(java.lang.Class,com.gampire.pc.json.JSONArray) -> a
    java.lang.Object[] createBeans(java.lang.Class,java.lang.String) -> a
com.gampire.pc.json.JSONException -> c:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
com.gampire.pc.json.JSONObject -> E:
    java.util.Map map -> a
    java.util.List list -> a
    java.lang.Object NULL -> a
    java.lang.Object get(java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    java.util.Iterator keys() -> a
    java.lang.String numberToString(java.lang.Number) -> a
    java.lang.Object opt(java.lang.String) -> c
    com.gampire.pc.json.JSONObject put(java.lang.String,java.lang.Object) -> a
    void putInMapAndList(java.lang.String,java.lang.Object) -> a
    java.lang.String quote(java.lang.String) -> b
    java.lang.Object stringToValue(java.lang.String) -> b
    void testValidity(java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> a
    java.lang.String toString(int,int) -> a
    java.lang.String valueToString(java.lang.Object) -> a
    java.lang.String valueToString(java.lang.Object,int,int) -> a
com.gampire.pc.json.JSONObject$Null -> aj:
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.gampire.pc.json.JSONString -> O:
    java.lang.String toJSONString() -> a
com.gampire.pc.json.JSONTokener -> p:
    int index -> a
    java.io.Reader reader -> a
    char lastChar -> a
    boolean useLastChar -> a
    void back() -> a
    char next() -> a
    java.lang.String next(int) -> a
    char nextClean() -> b
    java.lang.Object nextValue() -> a
    com.gampire.pc.json.JSONException syntaxError(java.lang.String) -> a
    java.lang.String toString() -> toString
com.gampire.pc.license.LicenseManager -> av:
    boolean LICENSE_VALID -> a
    void showLimitedFunctionalityMessage(java.awt.Component) -> a
    void showLimitedFunctionalityShortMessage(java.awt.Component) -> b
com.gampire.pc.model.Alliance -> x:
    com.gampire.pc.model.AllianceBean allianceBean -> a
    java.awt.Image flag -> a
    javax.swing.ImageIcon flagIcon -> a
    com.gampire.pc.model.Alliance[] all -> a
    com.gampire.pc.model.Alliance get(java.lang.String) -> a
    com.gampire.pc.model.Alliance[] getAll() -> a
    java.lang.String getName() -> a
    javax.swing.ImageIcon getFlagIcon() -> a
com.gampire.pc.model.AllianceBean -> com.gampire.pc.model.AllianceBean:
    java.lang.String name -> a
    java.lang.String flag -> b
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getFlag() -> getFlag
    void setFlag(java.lang.String) -> setFlag
com.gampire.pc.model.Army -> af:
    com.gampire.pc.model.Army[] all -> a
    com.gampire.pc.model.ArmyBean armyBean -> a
    com.gampire.pc.model.Alliance alliance -> a
    java.awt.image.BufferedImage flag -> a
    java.awt.image.BufferedImage smallFlag -> b
    javax.swing.ImageIcon flagIcon -> a
    java.awt.Color color -> a
    java.awt.Color middleBrightColor -> b
    java.awt.Color brightColor -> c
    com.gampire.pc.model.Army get(java.lang.String) -> a
    java.lang.String toString() -> toString
    com.gampire.pc.model.Alliance getAlliance() -> a
    java.awt.image.BufferedImage getFlag() -> a
    java.awt.image.BufferedImage getSmallFlag() -> b
    javax.swing.ImageIcon getFlagIcon() -> a
    java.awt.Color getColor() -> a
    java.awt.Color getMiddleBrightColor() -> b
    java.awt.Color getBrightColor() -> c
com.gampire.pc.model.ArmyBean -> com.gampire.pc.model.ArmyBean:
    java.lang.String name -> a
    java.lang.String alliance -> b
    java.lang.String flag -> c
    int colorRedValue -> a
    int colorGreenValue -> b
    int colorBlueValue -> c
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getAllianceName() -> getAllianceName
    void setAllianceName(java.lang.String) -> setAllianceName
    java.lang.String getFlag() -> getFlag
    void setFlag(java.lang.String) -> setFlag
    int getColorRedValue() -> getColorRedValue
    void setColorRedValue(int) -> setColorRedValue
    int getColorGreenValue() -> getColorGreenValue
    void setColorGreenValue(int) -> setColorGreenValue
    int getColorBlueValue() -> getColorBlueValue
    void setColorBlueValue(int) -> setColorBlueValue
com.gampire.pc.model.Unit -> d:
    com.gampire.pc.util.thread.ThreadUtil camp$2a59c05e -> a
    com.gampire.pc.model.UnitType unitType -> a
    java.lang.String name -> a
    boolean selectedForAction -> a
    boolean moving -> b
    boolean hasFired -> c
    boolean destroyed -> d
    boolean exploding -> e
    int additionalDefendPoints -> a
    java.util.Map distanceInfoMapToEnemyUnits -> a
    com.gampire.pc.util.string.StringUtil animation$3e130d13 -> a
    javax.swing.ImageIcon getImageIcon() -> a
    void setSelectedForAction(boolean) -> a
    java.lang.String toString() -> toString
    com.gampire.pc.model.Unit getClosestEnemyUnit() -> a
    int compareTo(java.lang.Object) -> compareTo
com.gampire.pc.model.UnitAction -> az:
    com.gampire.pc.model.UnitAction MOVE -> a
    com.gampire.pc.model.UnitAction FIRE -> b
    com.gampire.pc.model.UnitAction MOVE_AND_FIRE -> c
    com.gampire.pc.model.UnitAction DEFEND -> d
    com.gampire.pc.model.UnitAction EXPLODE -> e
    java.lang.String name -> a
    java.applet.AudioClip clip -> a
    java.lang.String toString() -> toString
    void playSound() -> a
com.gampire.pc.model.UnitType -> u:
    java.util.Map allianceMap -> a
    com.gampire.pc.model.UnitType[] all -> a
    int nextIndex -> a
    com.gampire.pc.model.UnitTypeBean unitTypeBean -> a
    com.gampire.pc.model.Army army -> a
    int index -> b
    java.awt.image.BufferedImage bigImage -> a
    java.awt.image.BufferedImage image -> b
    javax.swing.ImageIcon icon -> a
    int points -> c
    boolean imageReplacedByFlag -> a
    int getAntiPersonnelRange() -> a
    int getAntiTankRange() -> b
    com.gampire.pc.model.Army getArmy() -> a
    int getDefendValue() -> c
    javax.swing.ImageIcon getImageIcon() -> a
    java.awt.image.BufferedImage getBigImage() -> a
    int getMoveRange() -> d
    int getPoints() -> e
    java.lang.String getName() -> a
    java.lang.String getShortName() -> b
    boolean isArmored() -> a
    int getMaximumEffectiveRange(com.gampire.pc.model.UnitType) -> a
    int getMeanEffectiveRange(com.gampire.pc.model.UnitType) -> b
    java.lang.String toString() -> toString
    com.gampire.pc.model.UnitType selectRandomUnitType(com.gampire.pc.model.Alliance) -> a
    java.util.Vector getAllForAliance(com.gampire.pc.model.Alliance) -> a
    int compareTo(com.gampire.pc.model.UnitType) -> c
    int compareTo(java.lang.Object) -> compareTo
com.gampire.pc.model.UnitTypeBean -> com.gampire.pc.model.UnitTypeBean:
    java.lang.String name -> a
    java.lang.String shortName -> b
    int moveRange -> a
    int antiPersonnelRange -> b
    int antiTankRange -> c
    int defendValue -> d
    boolean armored -> a
    java.lang.String armyName -> c
    java.lang.String image -> d
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getShortName() -> getShortName
    void setShortName(java.lang.String) -> setShortName
    int getMoveRange() -> getMoveRange
    void setMoveRange(int) -> setMoveRange
    int getAntiPersonnelRange() -> getAntiPersonnelRange
    void setAntiPersonnelRange(int) -> setAntiPersonnelRange
    int getAntiTankRange() -> getAntiTankRange
    void setAntiTankRange(int) -> setAntiTankRange
    int getDefendValue() -> getDefendValue
    void setDefendValue(int) -> setDefendValue
    boolean isArmored() -> isArmored
    void setArmored(boolean) -> setArmored
    java.lang.String getArmyName() -> getArmyName
    void setArmyName(java.lang.String) -> setArmyName
    java.lang.String getImage() -> getImage
    void setImage(java.lang.String) -> setImage
com.gampire.pc.sound.AudioClipUtil -> D:
com.gampire.pc.speech.Speaker -> ab:
    com.gampire.pc.speech.Speaker instance -> a
    java.lang.String VOICE_NAME -> a
    com.sun.speech.freetts.Voice voice -> a
    com.gampire.pc.speech.Speaker getInstance() -> a
    void speakAndWait(java.lang.String) -> a
    void speak(java.lang.String) -> b
    com.sun.speech.freetts.Voice access$0(com.gampire.pc.speech.Speaker) -> a
com.gampire.pc.speech.Speaker$SpeakerThread -> ax:
    java.lang.String message -> a
    com.gampire.pc.speech.Speaker this$0 -> a
    void run() -> run
com.gampire.pc.swing.cursor.CursorUtil -> w:
    int lastMeasuredDistance -> a
    double maxMoveAfterMeasure -> a
    int mostProbableDistance -> b
    void positionCursor(java.awt.Window,java.awt.Point) -> a
    void update(double) -> a
    boolean isCertain() -> a
    int getMostProbableDistance() -> a
com.gampire.pc.swing.lookandfeel.PCIITheme -> ac:
    java.awt.Color GRAY -> a
    java.awt.Color LIGHT_GRAY -> b
    java.awt.Color DARK_GRAY -> c
    java.awt.Font FONT -> a
    javax.swing.plaf.FontUIResource FONT_UI_RESOURCE -> a
    javax.swing.plaf.ColorUIResource primary1 -> a
    javax.swing.plaf.ColorUIResource primary2 -> b
    javax.swing.plaf.ColorUIResource primary3 -> c
    javax.swing.plaf.ColorUIResource secondary1 -> d
    javax.swing.plaf.ColorUIResource secondary2 -> e
    javax.swing.plaf.ColorUIResource secondary3 -> f
    java.lang.String getName() -> getName
    javax.swing.plaf.ColorUIResource getPrimary1() -> getPrimary1
    javax.swing.plaf.ColorUIResource getPrimary2() -> getPrimary2
    javax.swing.plaf.ColorUIResource getPrimary3() -> getPrimary3
    javax.swing.plaf.ColorUIResource getSecondary1() -> getSecondary1
    javax.swing.plaf.ColorUIResource getSecondary2() -> getSecondary2
    javax.swing.plaf.ColorUIResource getSecondary3() -> getSecondary3
    javax.swing.plaf.FontUIResource getControlTextFont() -> getControlTextFont
    javax.swing.plaf.FontUIResource getSystemTextFont() -> getSystemTextFont
    javax.swing.plaf.FontUIResource getUserTextFont() -> getUserTextFont
    javax.swing.plaf.FontUIResource getMenuTextFont() -> getMenuTextFont
    javax.swing.plaf.FontUIResource getWindowTitleFont() -> getWindowTitleFont
    javax.swing.plaf.FontUIResource getSubTextFont() -> getSubTextFont
com.gampire.pc.swing.model.FreezeableListSelectionModel -> g:
    boolean freezed -> a
    void setSelectionInterval(int,int) -> setSelectionInterval
com.gampire.pc.swing.renderer.HasImageIcon -> Y:
    javax.swing.ImageIcon getImageIcon() -> a
com.gampire.pc.swing.renderer.HasImageIconListCellRenderer -> h:
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
com.gampire.pc.swing.util.TranslucentComponent -> I:
    java.awt.Component parent -> a
    java.awt.image.BufferedImage background -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
com.gampire.pc.util.image.ImageUtil -> S:
    java.awt.image.BufferedImage explodeImage -> a
    java.awt.image.BufferedImage cloudLeftImage -> b
    java.awt.image.BufferedImage cloudRightImage -> c
    java.awt.image.BufferedImage[] brickWallImages -> a
    java.awt.image.BufferedImage getImage(java.lang.String) -> a
    java.awt.image.BufferedImage getScaledImage(java.lang.String) -> b
    java.awt.image.BufferedImage getScaledImage(java.lang.String,int) -> a
    java.awt.image.BufferedImage computeScaledImage(java.awt.Image,int,int) -> a
    java.awt.image.BufferedImage computeScaledImage(java.awt.Image,int) -> a
    java.awt.image.BufferedImage computeOverlayedImage(java.awt.Image,java.awt.Image,int,int) -> a
    java.awt.image.BufferedImage addExplosion(java.awt.image.BufferedImage,boolean,float) -> a
    java.awt.image.BufferedImage addCloud(java.awt.image.BufferedImage,boolean,float) -> b
    java.awt.image.BufferedImage addMovement(java.awt.image.BufferedImage,boolean,float) -> c
    java.awt.image.BufferedImage addLens(java.awt.image.BufferedImage) -> a
    java.awt.image.BufferedImage addWall(java.awt.image.BufferedImage,int) -> a
    java.awt.image.BufferedImage fade(java.awt.image.BufferedImage,int) -> b
    java.awt.image.BufferedImage superpose(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> a
com.gampire.pc.util.image.filter.AbstractBufferedImageOp -> y:
    java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel) -> createCompatibleDestImage
    java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage) -> getBounds2D
    java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D) -> getPoint2D
    java.awt.RenderingHints getRenderingHints() -> getRenderingHints
    int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[]) -> a
    void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[]) -> a
    int mod(int,int) -> a
    int clamp(int,int,int) -> a
    int clamp(int) -> a
com.gampire.pc.util.image.filter.ContrastFilter -> ae:
    float brightness -> a
    float contrast -> b
    float transferFunction(float) -> a
    java.lang.String toString() -> toString
com.gampire.pc.util.image.filter.GradientWipeFilter -> t:
    float density -> a
    float softness -> b
    boolean invert -> a
    java.awt.image.BufferedImage mask -> a
    java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> filter
    java.lang.String toString() -> toString
com.gampire.pc.util.image.filter.MotionBlurFilter -> B:
    float angle -> a
    float distance -> b
    float zoom -> c
    float rotation -> d
    boolean wrapEdges -> a
    boolean premultiplyAlpha -> b
    java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> filter
    void premultiply(int[],int,int) -> a
    void unpremultiply(int[],int,int) -> b
    java.lang.String toString() -> toString
com.gampire.pc.util.image.filter.PointFilter -> as:
    java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> filter
    int filterRGB$4868d301(int) -> b
com.gampire.pc.util.image.filter.SphereFilter -> L:
    float a -> a
    float b -> b
    float a2 -> c
    float b2 -> d
    float centreX -> e
    float centreY -> f
    float refractionIndex -> g
    float icentreX -> h
    float icentreY -> i
    java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> filter
    void transformInverse(int,int,float[]) -> a
    java.lang.String toString() -> toString
com.gampire.pc.util.image.filter.TransferFilter -> H:
    int[] rTable -> a
    int[] gTable -> b
    int[] bTable -> c
    boolean initialized -> a
    int filterRGB$4868d301(int) -> b
    java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> filter
    float transferFunction(float) -> a
com.gampire.pc.util.image.filter.TransformFilter -> ap:
    int edgeAction -> a
    int interpolation -> b
    java.awt.Rectangle transformedSpace -> a
    void setEdgeAction(int) -> a
    void transformInverse(int,int,float[]) -> a
    java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage) -> filter
    int getPixel(int[],int,int,int,int) -> a
    java.awt.image.BufferedImage filterPixelsNN(java.awt.image.BufferedImage,int,int,int[],java.awt.Rectangle) -> a
com.gampire.pc.util.string.StringUtil -> R:
    com.gampire.pc.model.Unit unit -> a
    boolean blinkOn -> a
    int blinkingStep -> a
    int movementStep -> b
    int cloudMovementStep -> c
    int explosionStep -> d
    int getLevenshteinDistance(java.lang.String,java.lang.String) -> a
    boolean getBlinkOn() -> a
    float getMovementPercentage() -> a
    float getCloudMovementPercentage() -> b
    float getExplosionPercentage() -> c
    boolean advance() -> b
com.gampire.pc.util.thread.ThreadUtil -> l:
    com.gampire.pc.web.BareBonesBrowserLaunch battleField$21296f -> a
    com.gampire.pc.model.Alliance alliance -> a
    int numPoints -> a
    java.util.Vector units -> a
    boolean isLeft -> a
    void waitAWhile(int) -> a
    com.gampire.pc.model.Alliance getAlliance() -> a
    int getIndex(com.gampire.pc.model.Unit) -> a
    java.util.Vector getUnits() -> a
    void addUnit() -> a
    void addUnit(com.gampire.pc.model.Unit) -> a
    void removeUnit(com.gampire.pc.model.Unit) -> b
    void changeUnitType(int,com.gampire.pc.model.UnitType) -> a
    int removeDestroyedUnits() -> a
    void updateUnitsWithSameName(java.lang.String) -> a
    int getNumPoints() -> b
    com.gampire.pc.model.Unit getUnitSelectedForAction() -> a
    boolean isSelectedForAction() -> a
    boolean isSelectedAsTarget() -> b
    boolean isLeft() -> c
    com.gampire.pc.util.thread.ThreadUtil getOther$2463ddff() -> a
    boolean advanceAnimations() -> d
com.gampire.pc.view.dialog.DistanceDialog -> A:
    javax.swing.JLabel messageLabel -> b
    javax.swing.JLabel distanceLabel -> a
    javax.swing.JSlider slider -> a
    javax.swing.JButton fireButton -> a
    javax.swing.JButton cancelButton -> b
    int maxSelectionIndex -> b
    java.awt.FontMetrics fontMetrics -> a
    int selectedDistance -> a
    java.lang.String getDistanceDescription(int) -> a
    void formatButton(javax.swing.JButton,java.lang.String,java.lang.String) -> a
    void fire() -> a
com.gampire.pc.view.dialog.DistanceDialog$1 -> o:
    com.gampire.pc.view.dialog.DistanceDialog this$0 -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
com.gampire.pc.view.dialog.DistanceDialog$2 -> v:
    com.gampire.pc.view.dialog.DistanceDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.dialog.DistanceDialog$3 -> s:
    com.gampire.pc.view.dialog.DistanceDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.dialog.DistanceDialog$4 -> f:
    com.gampire.pc.view.dialog.DistanceDialog this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
com.gampire.pc.view.dialog.DistanceDialog$5 -> e:
    com.gampire.pc.view.dialog.DistanceDialog this$0 -> a
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
com.gampire.pc.view.frame.BattleFieldFrame -> G:
    com.gampire.pc.view.panel.BattleFieldPanel panel -> a
    void setAndConfigurePanel(com.gampire.pc.view.panel.BattleFieldPanel) -> a
com.gampire.pc.view.frame.ErrorMessageFrame -> ai:
    javax.swing.JTextArea textArea -> a
com.gampire.pc.view.frame.PCFrame -> X:
com.gampire.pc.view.panel.BattleFieldControlPanel -> aa:
    javax.swing.JButton startStopButton -> a
    javax.swing.JButton moveButton -> b
    javax.swing.JButton fireButton -> c
    javax.swing.JButton moveAndFireButton -> d
    javax.swing.JButton defendButton -> e
    javax.swing.JButton helpButton -> f
    java.lang.String TOOLTIP_MOVE -> a
    java.lang.String TOOLTIP_FIRE -> b
    java.lang.String TOOLTIP_FIRE_NO_TARGET -> c
    java.lang.String TOOLTIP_MOVE_AND_FIRE -> d
    java.lang.String TOOLTIP_MOVE_AND_FIRE_NO_TARGET -> e
    java.lang.String TOOLTIP_DEFEND -> f
    com.gampire.pc.web.BareBonesBrowserLaunch battleField$21296f -> a
    boolean playGameButtonsEnabled -> a
    void formatButton(javax.swing.JButton,java.lang.String,java.lang.String) -> a
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    void updateButtons(boolean) -> a
    void updateButtons() -> a
    javax.swing.JButton getDefendButton() -> a
    javax.swing.JButton getFireButton() -> b
    javax.swing.JButton getMoveAndFireButton() -> c
    javax.swing.JButton getMoveButton() -> d
com.gampire.pc.view.panel.BattleFieldControlPanel$1 -> ay:
    com.gampire.pc.view.panel.BattleFieldControlPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.panel.BattleFieldControlPanel$2 -> W:
    com.gampire.pc.view.panel.BattleFieldControlPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.panel.BattleFieldControlPanel$3 -> V:
    com.gampire.pc.view.panel.BattleFieldControlPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.panel.BattleFieldControlPanel$4 -> U:
    com.gampire.pc.view.panel.BattleFieldControlPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.panel.BattleFieldControlPanel$5 -> T:
    com.gampire.pc.view.panel.BattleFieldControlPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.panel.BattleFieldControlPanel$6 -> Q:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.view.panel.BattleFieldControlPanel$7 -> P:
    com.gampire.pc.view.panel.BattleFieldControlPanel this$0 -> a
    void run() -> run
com.gampire.pc.view.panel.BattleFieldPanel -> ah:
    com.gampire.pc.view.table.UnitTableModel unitTableModel1 -> a
    com.gampire.pc.view.table.UnitTableModel unitTableModel2 -> b
    com.gampire.pc.view.table.UnitTable unitTable1 -> a
    com.gampire.pc.view.table.UnitTable unitTable2 -> b
    javax.swing.JScrollPane scrollPane1 -> a
    javax.swing.JScrollPane scrollPane2 -> b
    com.gampire.pc.view.panel.CampControlPanel campControl1 -> a
    com.gampire.pc.view.panel.CampControlPanel campControl2 -> b
    com.gampire.pc.view.panel.LogPanel logPanel -> a
    com.gampire.pc.view.panel.BattleFieldControlPanel battleFieldControlPanel -> a
    java.awt.image.BufferedImage background -> a
    java.awt.image.BufferedImage scaledBackground -> b
    void paintComponent(java.awt.Graphics) -> paintComponent
    void scrollToUnit(com.gampire.pc.model.Unit,java.awt.Window) -> a
    void setSelectable$1e185993(com.gampire.pc.util.thread.ThreadUtil,boolean) -> a
    com.gampire.pc.model.Unit getSelectedUnit$18eec550(com.gampire.pc.util.thread.ThreadUtil) -> a
    com.gampire.pc.model.Unit selectMostProbableTarget(com.gampire.pc.model.Unit) -> a
    void fireTableDataChanged$200fb547(com.gampire.pc.util.thread.ThreadUtil) -> a
    void setEditable(boolean) -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
    void inform(java.lang.String) -> a
com.gampire.pc.view.panel.BattleFieldPanel$1 -> al:
    com.gampire.pc.view.panel.BattleFieldPanel this$0 -> a
    boolean val$campToUpdateIsLeft -> a
    void run() -> run
com.gampire.pc.view.panel.CampControlPanel -> au:
    com.gampire.pc.util.thread.ThreadUtil camp$2a59c05e -> a
    com.gampire.pc.view.table.UnitTableModel unitTableModel -> a
    com.gampire.pc.view.table.UnitTable unitTable -> a
    javax.swing.JButton addButton -> a
    javax.swing.JButton removeButton -> b
    javax.swing.JLabel campPointsLabel -> a
    javax.swing.JLabel allianceFlagLabelLeft -> b
    javax.swing.JLabel allianceFlagLabelRight -> c
    void formatButton(javax.swing.JButton,java.lang.String,java.lang.String) -> a
    void updateCampPointsLabel() -> a
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void setActivated(boolean) -> a
com.gampire.pc.view.panel.LogPanel -> J:
    javax.swing.JTextPane textPane -> a
    javax.swing.text.StyledDocument document -> a
    javax.swing.text.Style informStyle -> a
    javax.swing.text.Style alertStyle -> b
    void insertString(java.lang.String,javax.swing.text.Style) -> a
com.gampire.pc.view.panel.LogPanel$InformRunnable -> an:
    java.lang.String message -> a
    com.gampire.pc.view.panel.LogPanel this$0 -> a
    void run() -> run
com.gampire.pc.view.table.UnitTable -> j:
    boolean isEditable -> b
    boolean isSelectable -> a
    com.gampire.pc.swing.model.FreezeableListSelectionModel selectionModel -> a
    com.gampire.pc.view.table.renderer.UnitDetailsTableCellRenderer detailsRenderer -> a
    com.gampire.pc.view.table.renderer.UnitPictureTableCellRenderer pictureRenderer -> a
    boolean isLeft -> c
    java.awt.Point getUnitPosition(int) -> a
    boolean isCellEditable(int,int) -> isCellEditable
    void setEditable(boolean) -> a
    void updateCursor() -> a
    java.lang.String getToolTipText(java.awt.event.MouseEvent) -> getToolTipText
com.gampire.pc.view.table.UnitTableModel -> b:
    java.lang.String[] columnNames -> a
    com.gampire.pc.util.thread.ThreadUtil camp$2a59c05e -> a
    int getColumnCount() -> getColumnCount
    int getRowCount() -> getRowCount
    java.lang.String getColumnName(int) -> getColumnName
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.Class getColumnClass(int) -> getColumnClass
    boolean isCellEditable(int,int) -> isCellEditable
    void setValueAt(java.lang.Object,int,int) -> setValueAt
    int removeDestroyedUnits() -> a
com.gampire.pc.view.table.renderer.UnitDetailsTableCellRenderer -> K:
    javax.swing.JLabel armyFlagLabel -> a
    javax.swing.JLabel unitNameLabel -> b
    javax.swing.JLabel moveRangeLabel -> c
    javax.swing.JLabel antiPersonnelRangeLabel -> d
    javax.swing.JLabel antiTankRangeLabel -> e
    javax.swing.JLabel defendValueLabel -> f
    javax.swing.JLabel pointsLabel -> g
    javax.swing.JLabel moveRangeField -> h
    javax.swing.JLabel antiPersonnelRangeField -> i
    javax.swing.JLabel antiTankRangeField -> j
    javax.swing.JLabel defendValueField -> k
    javax.swing.JLabel pointsField -> l
    java.lang.String getToolTipText(java.awt.event.MouseEvent) -> getToolTipText
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
com.gampire.pc.view.table.renderer.UnitPictureTableCellRenderer -> ag:
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
com.gampire.pc.view.table.renderer.UnitTypeListCellRenderer -> ad:
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
com.gampire.pc.view.window.SplashScreen -> Z:
    java.awt.Image image_ -> a
    int x_ -> a
    int y_ -> b
    int width_ -> c
    int height_ -> d
    void paint(java.awt.Graphics) -> paint
com.gampire.pc.view.window.SplashScreen$1 -> a:
    com.gampire.pc.view.window.SplashScreen this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.gampire.pc.web.BareBonesBrowserLaunch -> i:
    com.gampire.pc.util.thread.ThreadUtil camp1$2a59c05e -> a
    com.gampire.pc.util.thread.ThreadUtil camp2$2a59c05e -> b
    com.gampire.pc.view.table.UnitTableModel unitTableModel1 -> a
    com.gampire.pc.view.table.UnitTableModel unitTableModel2 -> b
    com.gampire.pc.model.Unit unitSelectedForAction -> a
    com.gampire.pc.control.BattleFieldController battleFieldController -> a
    com.gampire.pc.util.thread.ThreadUtil getCamp1$2463ddff() -> a
    com.gampire.pc.util.thread.ThreadUtil getCamp2$2463ddff() -> b
    void selectUnitForAction() -> a
    void deselectUnitSelectedForAction() -> b
    com.gampire.pc.util.thread.ThreadUtil removeDestroyedUnits$2463ddff() -> c
    com.gampire.pc.model.Unit getUnitSelectedForAction() -> a
    com.gampire.pc.control.BattleFieldController getBattleFieldController() -> a
    void setBattleFieldController(com.gampire.pc.control.BattleFieldController) -> a
    com.gampire.pc.view.table.UnitTableModel getUnitTableModel1() -> a
    com.gampire.pc.view.table.UnitTableModel getUnitTableModel2() -> b
    boolean advanceAnimations() -> a
